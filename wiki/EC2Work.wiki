#summary created ec2 image for open-biomed.

= Create a test image =
{{{
########################################################################################
######## 2009-11-24
########
######## work to create an EC2 image for open-biomed
########################################################################################
## assume we already have AWS account, and have signed up for S3 and EC2
## we have launched an image through the web-based console
## now we try to ssh into this EC2 instance ec2-79-125-34-108.eu-west-1.compute.amazonaws.com
#
ssh -i id_rsa-gsg-keypair root@ec2-79-125-34-108.eu-west-1.compute.amazonaws.com
ssh -i ec2-for-flykit-2009.pem root@ec2-79-125-34-108.eu-west-1.compute.amazonaws.com
chmod 600 ec2-for-flykit-2009.pem 
ssh -i ec2-for-flykit-2009.pem root@ec2-79-125-34-108.eu-west-1.compute.amazonaws.com
## it worked
##
############################################
######## USE COMMAND-LINE TOOL TO CONTROL AMI
############################################
#### setup EC2 tools
## set up java home
#
export JAVA_HOME=/usr/bin/java
#
#### set up home for the ec2 command-line tool
#
export EC2_HOME=/home/zhaoj/kit/ec2-api-tools-1.3-42584/
echo $EC2_HOME 
export PATH=$PATH:$EC2_HOME/bin
#
#### create .ec2 directory for keeping the keys
#
mkdir .ec2
mv *.pem ~./ec2/
#
#### set up paths for the keys
#
export EC2_PRIVATE_KEY=~/.ec2/pk-XXXX.pem
export EC2_CERT=~/.ec2/cert-XXXX.pem
echo $JAVA_HOME
#
## All worked!!
############################################
####### try launching an AMI
############################################
#### list all available AMIs
#
ec2-describe-images -o self -o amazon
#
#### check which version of tools
#
echo $EC2_HOME 
ec2-version
#
## using api version 2009-08-15
## found docs at http://docs.amazonwebservices.com/AWSEC2/2009-08-15/GettingStartedGuide/
#
#### try launching an instance
#
ec2-describe-images -o self -o amazon
#
#### find a suitable AMI
#
ec2-describe-images -o self -o amazon | grep machine
#
#### try to find image identified by ec2-public-images/getting-started.manifest.xml in the third column
## in this case: ami-3c47a355
#
#### generate a key pair
#
ec2-add-keypair ec2openbiomed-keypair
emacs id_rsa-gsg-keypair
less id_rsa-gsg-keypair
chmod 600 id_rsa-gsg-keypair 
ls -l id_rsa-gsg-keypair
# 
#### launch an instance of an AMI
#
ec2-run-instances ami-3c47a355 -k ec2openbiomed-keypair
#
## INSTANCE i-41f89229 ami-3c47a355 pending ec2openbiomed-keypair 0 m1.small 2009-11-24T11:43:59+0000
#### check the status
#
ec2-describe-instances i-41f89229
#
#### check out in web browser http://ec2-75-101-194-85.compute-1.amazonaws.com
## it didn't work!
#### authorize network access to the instance
#
ec2-authorize default -p 22
ec2-authorize default -p 80
#
## now http acccess worked!
#
#### check SSH HOST KEY FINGERPRINTS for a public AMI not bundled
#
ec2-get-console-output i-41f89229
#
#### try to ssh to the instance
#
ssh -i id_rsa-gsg-keypair root@ec2-75-101-194-85.compute-1.amazonaws.com/
ssh -i id_rsa-gsg-keypair root@ec2-75-101-194-85.compute-1.amazonaws.com
#
## it all worked!
}}}

== Create the customized image for open-biomed ==
{{{
## assume that keypair for open-biomed has been generated openbiomed-keypair and put in the right place and give the right access right
#### create an instance of ubuntu 9.01 jaunty 32-bit server, created by Eric Hammond:  ami-ccf615a5
#
ec2-run-instances ami-ccf615a5 -k openbiomed-keypair --instance-type m1.small
#
#### check the status of instance i-656d190d
#
ec2-describe-instances i-656d190d
#
## instance running at ec2-72-44-34-80.compute-1.amazonaws.com
#### ssh to instance ec2-72-44-34-80.compute-1.amazonaws.com
#
ssh -i .ec2/id_rsa-openbiomed-keypair root@ec2-72-44-34-80.compute-1.amazonaws.com
#
## apache was then installed on the instance
}}}
=== Bundle the image ===
{{{
#### copy key and certificate to the machine to be bundled.
#
scp -i .ec2/id_rsa-openbiomed-keypair .ec2/pk-XXXX.pem .ec2/cert-XXXX.pem root@ec2-72-4
4-34-80.compute-1.amazonaws.com:/mnt
## copy to /mnt to prevent them being bundled with the new AMI
#### start the bundle
#
## now use AWS account ID as username to bundle
#
ssh -i .ec2/id_rsa-openbiomed-keypair root@ec2-72-44-34-80.compute-1.amazonaws.com
## the bundle is successfully uploaed and ready for register
## bucket name open-biomed-bucket
ssh -i .ec2/id_rsa-openbiomed-keypair root@ec2-72-44-34-80.compute-1.amazonaws.com
ec2-register open-biomed-bucket/image.manifest.xml
## got image ami-10fc1e79
#### start an instance of this image
#
ec2-run-instances ami-10fc1e79
#### check the status of the instance
#
ec2-describe-instances i-73582c1b
#### check instance running at ec2-75-101-206-234.compute-1.amazonaws.com
## it works
#### ssh to the instance
#
ssh -i .ec2/id_rsa-openbiomed-keypair root@ec2-75-101-206-234.compute-1.amazonaws.com
## ssh worked
ec2-describe-instances
#### copy keys to the new instance
scp -i .ec2/id_rsa-openbiomed-keypair .ec2/pk-XXXX.pem .ec2/cert-XXXX.pem root@ec2-75-101-206-234.compute-1.amazonaws.com:/mnt
#### terminate the old instance
#
ec2-terminate-instances i-656d190d
ec2-describe-instances
## terminated the old instance
## end of the session 
}}}

= set up virtuoso on ec2 =
{{{
##############################
##### ec2 work on open-biomed on 2009-11-25
##### start to set up virtuoso on ec2
##############################
#### first, create a new EBS volume
#### following docs at http://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/ (API version 2009-08-15)
#
# what availability zone?
#
ec2-describe-availability-zones 
#
# let's use us-east-1a
#
# create a 10GiB volume
#
ec2-create-volume --size 10 --zone us-east-1a
ec2-create-volume --size 10 -z us-east-1a
## VOLUME  vol-8dcd35e4    10              us-east-1a      creating        2009-11-25T11:57:12+0000
}}}